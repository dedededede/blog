<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一直在路上</title>
  <subtitle>码农 攻城狮</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-04-17T13:37:26.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zhangdede</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CentOS中搭建mysql5.1</title>
    <link href="http://yoursite.com/2016/04/17/CentOS%E4%B8%AD%E6%90%AD%E5%BB%BAmysql5-1/"/>
    <id>http://yoursite.com/2016/04/17/CentOS中搭建mysql5-1/</id>
    <published>2016-04-17T13:36:52.000Z</published>
    <updated>2016-04-17T13:37:26.000Z</updated>
    
    <content type="html">&lt;p&gt;##本地新建虚拟机，并配置mysql环境&lt;/p&gt;
&lt;p&gt;###1.搭建虚拟机,安装centos环境&lt;/p&gt;
&lt;p&gt;####1.1 下载&lt;a href=&quot;https://www.virtualbox.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;virtualbox&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;####1.2 下载&lt;a href=&quot;http://124.205.69.163/files/501700000008DED0/mirror.neu.edu.cn/centos/6.5/isos/x86_64/CentOS-6.5-x86_64-bin-DVD1.iso&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;centos6.5&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;####1.3 安装virtualbox，建立centos系统这里就不再赘述了&lt;/p&gt;
&lt;p&gt;###2.在虚拟机中搭建mysql环境&lt;/p&gt;
&lt;p&gt;####2.1 yum安装mysql&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; yum -y install mysql-server
&amp;gt; yum -y install mysql-client
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;####2.2 设置MySQL的root用户设置密码&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; mysqladmin -uroot password &amp;apos;密码&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;####2.3 给账户赋予权限&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; use mysql;
&amp;gt; create user &amp;apos;test_user&amp;apos;@&amp;apos;%&amp;apos; identified by &amp;apos;test_user&amp;apos;;
&amp;gt; grant all privileges on *.* to &amp;apos;test_user&amp;apos;@&amp;apos;%&amp;apos; identified by &amp;apos;test_user&amp;apos;;
&amp;gt; flush privileges;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;####2.4 重新启动mysql&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; /etc/init.d/mysqld restart
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;####2.5 centos 默认是不开放端口的，所以需要开放3306端口&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;gt; /sbin/iptables -I INPUT -p tcp --dport 3306 -j ACCEPT
&amp;gt; /etc/rc.d/init.d/iptables save
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;至此，这样就可以从外部访问mysql了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;##本地新建虚拟机，并配置mysql环境&lt;/p&gt;
&lt;p&gt;###1.搭建虚拟机,安装centos环境&lt;/p&gt;
&lt;p&gt;####1.1 下载&lt;a href=&quot;https://www.virtualbox.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;v
    
    </summary>
    
      <category term="linux" scheme="http://yoursite.com/categories/linux/"/>
    
    
      <category term="linux,mysql" scheme="http://yoursite.com/tags/linux-mysql/"/>
    
  </entry>
  
  <entry>
    <title>python import 机制</title>
    <link href="http://yoursite.com/2016/04/12/python-import-%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2016/04/12/python-import-机制/</id>
    <published>2016-04-12T14:20:00.000Z</published>
    <updated>2016-04-13T15:10:25.000Z</updated>
    
    <content type="html">&lt;p&gt;首先看一个官方给出的&lt;a href=&quot;https://docs.python.org/2/whatsnew/2.5.html#pep-328-absolute-and-relative-imports&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;例子&lt;/a&gt;&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;pkg/&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pkg/__init__.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pkg/main.py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;pkg/string.py&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;现在考虑一下,如果我在main中import string 会发生什么？是引入系统的string还是引入当前目录下的string。&lt;br&gt;在Python2.4之前的版本会在当前的目录下引入string.py，并且会把它绑定到pkg.main的命名空间。如果你想引入string标准库该怎么做呢？py.std提供了一个整洁的方法去引入，&lt;br&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; py&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;py.std.strin.join()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;但是这不是适用所有的Python版本。&lt;/p&gt;
&lt;p&gt;Python中有两种引入包的方式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;相对引入&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在Python2.5之前是默认的引入方法。你可以通过使用from __future__ import absolute&lt;em&gt;import来使用绝对引入。&lt;br&gt;相对引入肯定是需要一个参照的对象，这里的参照物是谁呢？相对引入使用被引入文件的\&lt;/em&gt;_name__ 属性来决定该文件在整个包结构的位置。如果__name__ 的值为__main__，那么认为其为top level script，这个时候相对引入就没有引入的参照物，就会抛出ValueError: Attempted relative import in non-package的异常。&lt;br&gt;为了解决这个问题，PEP 0366 — Main module explicit relative imports提出了一个解决方案。&lt;br&gt;允许用户使用python -m source&lt;em&gt;folder.main的方式,来执行该文件。在这个方案下，引入了一个新的属性\&lt;/em&gt;_package__（会显示当前运行的程序所在的包的名称）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;绝对引入&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;在Python2.7之后，绝对引入是Python默认的引入方式，import string 会去查找标准库的string模块。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最后，对于两种引用的方式选择，还是有争论的。在PEP8中，Python官方推荐的是绝对引用,详细理由可以参考这儿。&lt;/p&gt;
&lt;p&gt;Absolute imports are recommended, as they are usually more readable and tend to be better behaved (or at least give better error messages) if the import system is incorrectly configured (such as when a directory inside a package ends up on sys.path ):&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; mypkg.sibling&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; mypkg &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; sibling&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; mypkg.sibling &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; example&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;However, explicit relative imports are an acceptable alternative to absolute imports, especially when dealing with complex package layouts where using absolute imports would be unnecessarily verbose:&lt;/p&gt;
&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; . &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; sibling&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; .sibling &lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; example&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Standard library code should avoid complex package layouts and always use absolute imports. Implicit relative imports should never be used and have been removed in Python 3.&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;首先看一个官方给出的&lt;a href=&quot;https://docs.python.org/2/whatsnew/2.5.html#pep-328-absolute-and-relative-imports&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;例子&lt;/
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>sql中的unkonw</title>
    <link href="http://yoursite.com/2016/04/05/sql%E4%B8%AD%E7%9A%84unkonw/"/>
    <id>http://yoursite.com/2016/04/05/sql中的unkonw/</id>
    <published>2016-04-05T13:18:22.000Z</published>
    <updated>2016-04-06T15:02:32.000Z</updated>
    
    <content type="html">&lt;ol&gt;
&lt;li&gt;解释一下SQL里面的null&lt;br&gt;答案：null代表一个unknown的值或者一个不存在的值&lt;/li&gt;
&lt;li&gt;如何用SQL判断一个值是不是null?&lt;br&gt;答案：可以用is null来判断一个值是不是null&lt;/li&gt;
&lt;li&gt;所有包含null的计算表达式的返回结果都是null, 这句话正确吗？比如5+ null返回null&lt;br&gt;答案：正确&lt;/li&gt;
&lt;li&gt;所有与null得比较运算都返回unknown正确吗？&lt;br&gt;答案：正确&lt;/li&gt;
&lt;li&gt;(unknown or true) = true正确吗？&lt;br&gt;答案：正确，进行的是或运算，就算不知道unknown不知道真假，但是or后面的true为真，所以最终结果为true。&lt;/li&gt;
&lt;li&gt;(unknown or false) = unknown正确吗？&lt;br&gt;答案：正确，&lt;/li&gt;
&lt;li&gt;(unknown or unknown) = unknown正确吗？&lt;br&gt;答案：正确&lt;/li&gt;
&lt;li&gt;(true and unknown) = unknown正确吗？&lt;br&gt;答案：正确&lt;/li&gt;
&lt;li&gt;(false and unknown) = false正确吗？&lt;br&gt;答案：正确&lt;/li&gt;
&lt;li&gt;(unknown and unknown) = unknown正确吗？&lt;br&gt;答案：正确&lt;/li&gt;
&lt;li&gt;(not unknown) = unknown 正确吗？&lt;br&gt;答案：正确&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;刚开始看了以上面试题，觉得一点都不会，后来查询了mysql手册，顿时大唔。&lt;br&gt;对于SQL的新手，NULL值的概念常常会造成混淆，他们常认为NULL是与空字符串’’相同的事。&lt;br&gt;为了进行NULL处理，可使用IS NULL和IS NOT NULL操作符以及IFNULL()函数。&lt;/p&gt;
&lt;p&gt;在SQL中，NULL值与任何其它值的比较（即使是NULL）永远不会为“真”。包含NULL的表达式总是会导出NULL值，除非在关于操作符的文档中以及表达式的函数中作了其他规定。&lt;br&gt;后来又查看了&lt;a href=&quot;http://blog.sina.com.cn/gujinku&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://blog.sina.com.cn/gujinku&lt;/a&gt; 这篇文章，下面是其中的一段话，&lt;/p&gt;
&lt;p&gt;因为NULL当UNKNOWN来理解，因此，当值为NULL时，它既有可能是FALSE也有可能是TRUE。如果计算结果只有一种可能，则取该种可能；如果计算结果既有可能是FALSE，也有可能是TRUE，那么结果便为NULL。例如，NOT NULL，其结果也有两种可能，因此NOT NULL的结果是NULL。再例如，NULL AND TRUE，则其结果也有两种可能，因此NULL AND TRUE的结果是NULL。但是，NULL OR TRUE，或是NULL AND FALSE，前者结果为TRUE，单是一个TRUE出现，便足以知道结果为TRUE；后者结果为FALSE，单是一个FALSE出现，便足以知道结果为FALSE。这是OR和AND的特性决定的。&lt;/p&gt;
&lt;p&gt;现在回过头来，看上面的问题，是不是觉得就很容易理解了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;解释一下SQL里面的null&lt;br&gt;答案：null代表一个unknown的值或者一个不存在的值&lt;/li&gt;
&lt;li&gt;如何用SQL判断一个值是不是null?&lt;br&gt;答案：可以用is null来判断一个值是不是null&lt;/li&gt;
&lt;li&gt;所有包含null的计算表达式的
    
    </summary>
    
      <category term="mysql" scheme="http://yoursite.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://yoursite.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>python中的True,False</title>
    <link href="http://yoursite.com/2016/04/02/python%E4%B8%AD%E7%9A%84True-False/"/>
    <id>http://yoursite.com/2016/04/02/python中的True-False/</id>
    <published>2016-04-02T14:44:55.000Z</published>
    <updated>2016-04-02T14:48:40.000Z</updated>
    
    <content type="html">&lt;hr&gt;
&lt;p&gt;在Python中，0 == False， 1 == True 其余的既不是True，也不是False。&lt;br&gt;如果牵扯到bool计算时，除了’’、””、0、()、[]、{}、None为False之外，&lt;br&gt;其他的都是True。&lt;/p&gt;
&lt;p&gt;if 条件判断是在计算完后面表达式结束是，然后把计算结果进行bool计算。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;hr&gt;
&lt;p&gt;在Python中，0 == False， 1 == True 其余的既不是True，也不是False。&lt;br&gt;如果牵扯到bool计算时，除了’’、””、0、()、[]、{}、None为False之外，&lt;br&gt;其他的都是True。&lt;/p&gt;
&lt;p&gt;if 条件判断是在计
    
    </summary>
    
      <category term="python" scheme="http://yoursite.com/categories/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
</feed>
